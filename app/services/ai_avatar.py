"""
AI avatar service for the AI Content Factory application
"""
import httpx
import asyncio
from typing import Dict, Any, Optional

from app.core.config import settings


async def create_avatar_video(script: str, avatar_settings: Dict[str, Any]) -> str:
    """
    Create a video using AI avatar service (HeyGen or fallback providers)
    """
    from app.core.config import settings
    
    # Check if HeyGen API is configured
    if (settings.AI_AVATAR_API_KEY and 
        settings.AI_AVATAR_API_KEY != "your_heygen_api_key_here" and
        settings.AI_AVATAR_API_URL):
        
        try:
            # Try HeyGen API first
            return await _create_heygen_video(script, avatar_settings)
        except Exception as e:
            print(f"HeyGen API failed: {e}")
            # Fall back to other providers or mock
    
    # Try alternative providers or return mock video
    return await _create_mock_video(script, avatar_settings)


async def _create_heygen_video(script: str, avatar_settings: Dict[str, Any]) -> str:
    """
    Create video using HeyGen API
    """
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            # Create video
            response = await client.post(
                f"{settings.AI_AVATAR_API_URL}/v1/video/generate",
                json={
                    "video": {
                        "title": avatar_settings.get("title", "AI Generated Video"),
                        "description": avatar_settings.get("description", "Generated by AI Content Factory"),
                        "ratio": avatar_settings.get("ratio", "16:9"),
                        "avatar_id": avatar_settings.get("avatar_id", "default_avatar"),
                        "voice_id": avatar_settings.get("voice_id", "default_voice"),
                        "background": avatar_settings.get("background", "default_background"),
                        "scene": [
                            {
                                "avatar": avatar_settings.get("avatar_id", "default_avatar"),
                                "voice": avatar_settings.get("voice_id", "default_voice"),
                                "text": script
                            }
                        ]
                    }
                },
                headers={
                    "X-Api-Key": settings.AI_AVATAR_API_KEY,
                    "Content-Type": "application/json"
                }
            )
            response.raise_for_status()
            result = response.json()
            
            # Wait for video generation to complete
            video_id = result["data"]["video_id"]
            video_url = await poll_for_video_completion(video_id)
            return video_url
        
    except httpx.HTTPError as e:
        raise Exception(f"HeyGen HTTP error: {e}")
    except Exception as e:
        raise Exception(f"HeyGen API error: {e}")


async def _create_mock_video(script: str, avatar_settings: Dict[str, Any]) -> str:
    """
    Create a mock video URL for development/fallback
    """
    # Simulate video generation time
    await asyncio.sleep(2)
    
    # Generate a unique mock video URL
    import hashlib
    import time
    
    # Create a hash of the script for consistent URLs
    script_hash = hashlib.md5(script.encode()).hexdigest()[:8]
    timestamp = int(time.time())
    
    return f"https://mock-videos.ai-content-factory.com/generated/{script_hash}_{timestamp}.mp4"


async def poll_for_video_completion(video_id: str) -> str:
    """
    Poll HeyGen API for video completion
    """
    max_attempts = 30
    attempt = 0
    
    async with httpx.AsyncClient() as client:
        while attempt < max_attempts:
            try:
                response = await client.get(
                    f"{settings.AI_AVATAR_API_URL}/v1/video/{video_id}",
                    headers={"X-Api-Key": settings.AI_AVATAR_API_KEY}
                )
                response.raise_for_status()
                result = response.json()
                
                status = result["data"]["status"]
                if status == "completed":
                    return result["data"]["download_url"]
                elif status == "failed":
                    raise Exception(f"Video generation failed: {result.get('error', 'Unknown error')}")
                
            except httpx.HTTPError as e:
                print(f"HTTP error while polling for video completion: {e}")
                # Continue to next attempt
            
            # Wait before polling again
            await asyncio.sleep(10)
            attempt += 1
    
    raise Exception("Video generation timed out")


def customize_avatar(avatar_id: str, customization_options: Dict[str, Any]) -> Dict[str, Any]:
    """
    Customize an AI avatar with specific options
    """
    # In a real implementation, this would call the avatar service API
    # to customize an avatar with specific options
    
    # Example implementation:
    """
    response = httpx.post(
        f"{settings.AI_AVATAR_API_URL}/v1/avatar/{avatar_id}/customize",
        json=customization_options,
        headers={"Authorization": f"Bearer {settings.AI_AVATAR_API_KEY}"}
    )
    response.raise_for_status()
    return response.json()
    """
    
    # For now, return a simulated response
    return {
        "avatar_id": avatar_id,
        "customizations": customization_options,
        "status": "updated"
    }


async def get_available_avatars() -> Dict[str, Any]:
    """
    Get a list of available avatars from HeyGen
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{settings.AI_AVATAR_API_URL}/v1/avatars",
                headers={"X-Api-Key": settings.AI_AVATAR_API_KEY}
            )
            response.raise_for_status()
            result = response.json()
            return result
    except httpx.HTTPError as e:
        print(f"HTTP error occurred while fetching avatars: {e}")
        # Return sample data as fallback
        return {
            "avatars": [
                {
                    "id": "avatar_1",
                    "name": "Professional Male",
                    "description": "Business professional male avatar",
                    "preview_url": "https://example.com/avatars/avatar_1.jpg"
                },
                {
                    "id": "avatar_2",
                    "name": "Friendly Female",
                    "description": "Friendly and approachable female avatar",
                    "preview_url": "https://example.com/avatars/avatar_2.jpg"
                }
            ]
        }
    except Exception as e:
        print(f"Error fetching avatars: {e}")
        # Return sample data as fallback
        return {
            "avatars": [
                {
                    "id": "avatar_1",
                    "name": "Professional Male",
                    "description": "Business professional male avatar",
                    "preview_url": "https://example.com/avatars/avatar_1.jpg"
                },
                {
                    "id": "avatar_2",
                    "name": "Friendly Female",
                    "description": "Friendly and approachable female avatar",
                    "preview_url": "https://example.com/avatars/avatar_2.jpg"
                }
            ]
        }


async def create_custom_avatar(image_url: str, name: str) -> Dict[str, Any]:
    """
    Create a custom avatar from an image
    """
    # In a real implementation, this would upload the image and create a custom avatar
    """
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{settings.AI_AVATAR_API_URL}/v1/avatar/create",
            json={
                "image_url": image_url,
                "name": name
            },
            headers={"Authorization": f"Bearer {settings.AI_AVATAR_API_KEY}"}
        )
        response.raise_for_status()
        return response.json()
    """
    
    # For now, return a simulated response
    return {
        "avatar_id": "custom_avatar_123",
        "name": name,
        "status": "created",
        "preview_url": "https://example.com/avatars/custom_avatar_123.jpg"
    }